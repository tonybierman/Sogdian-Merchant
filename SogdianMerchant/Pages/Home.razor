@page "/"
@using System.Linq
@using Microsoft.FluentUI.AspNetCore.Components
@inject IJSRuntime JSRuntime
@inject IGameService GameService

<FluentHeader>Caravan Trading Game</FluentHeader>

<FluentCard Height="80vh" Style="padding: 10px;">
    <FluentLabel>Round @GameService.State.RoundNumber</FluentLabel>
    <FluentLabel>Player Gold: @GameService.State.PlayerGold.ToString("F2") | Computer Gold: @GameService.State.ComputerGold.ToString("F2")</FluentLabel>
    <FluentLabel>Your camel quality this round: @GameService.State.PlayerCamelQuality.ToString("F2") (speed multiplier)</FluentLabel>
    <pre>@GameService.State.CurrentMessage</pre>

    @if (!GameService.State.GameOver)
    {
        @if (GameService.State.CurrentPhase == "guards" && GameService.State.ChoosingGuards)
        {
            <FluentLabel>Available guards: @GameService.State.AvailableGuards</FluentLabel>
            <FluentNumberField TValue="int" @bind-Value="GameService.State.GuardInput" Min="1" Max="@GameService.State.AvailableGuards.ToString()" />
            <FluentButton OnClick="SubmitGuards">Submit Guards</FluentButton>
        }
        else if (GameService.State.CurrentPhase == "guide" && GameService.State.ChoosingGuide)
        {
            <FluentLabel>Available guides: @(GameService.State.NoviceAvailable ? "Novice " : "")@(GameService.State.VeteranAvailable ? "Veteran " : "")@(GameService.State.NoviceAvailable || GameService.State.VeteranAvailable ? "" : "None")</FluentLabel>
            <FluentSelect TOption="string" @bind-Value="GameService.State.GuideInput">
                <FluentOption TOption="string" Value="None">None</FluentOption>
                @if (GameService.State.NoviceAvailable)
                {
                    <FluentOption TOption="string" Value="Novice">Novice</FluentOption>
                }
                @if (GameService.State.VeteranAvailable)
                {
                    <FluentOption TOption="string" Value="Veteran">Veteran</FluentOption>
                }
            </FluentSelect>
            <FluentButton OnClick="SubmitGuide">Submit Guide</FluentButton>
        }
        else if (GameService.State.CurrentPhase == "market" && GameService.State.ChoosingMarket)
        {
            <FluentLabel>Available markets: @string.Join(", ", GameService.State.AvailableMarkets)</FluentLabel>
            <FluentSelect TOption="string" @bind-Value="GameService.State.MarketInput">
                <FluentOption TOption="string" Value="Do Nothing">Do Nothing</FluentOption>
                @foreach (var market in GameService.State.AvailableMarkets)
                {
                    <FluentOption TOption="string" Value="@market">@market</FluentOption>
                }
            </FluentSelect>
            <FluentButton OnClick="SubmitMarket">Submit Market</FluentButton>
        }
        else if (GameService.State.CurrentPhase == "end")
        {
            <FluentButton OnClick="ContinueToNextRound">Continue to Next Round</FluentButton>
        }
    }

    @if (GameService.State.GameOver)
    {
        <FluentLabel>@(GameService.State.PlayerGold >= 5000.0 ? "Player wins the game!" : "Computer wins the game!")</FluentLabel>
        <FluentButton OnClick="RestartGame">Restart Game</FluentButton>
    }
</FluentCard>

@code {
    protected override void OnInitialized()
    {
        GameService.StartRound();
    }

    private void SubmitGuards()
    {
        GameService.SubmitGuards();
    }

    private void SubmitGuide()
    {
        GameService.SubmitGuide();
    }

    private void SubmitMarket()
    {
        GameService.SubmitMarket();
    }

    private void ContinueToNextRound()
    {
        GameService.ContinueToNextRound();
    }

    private void RestartGame()
    {
        GameService.RestartGame();
    }
}